<?php

namespace Tests\Feature;

use App\Models\ApprovalWorkflow;
use App\Models\DataApprovalRequest;
use App\Models\Institution;
use App\Models\Survey;
use App\Models\SurveyQuestion;
use App\Models\SurveyResponse;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Sanctum\Sanctum;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

class SurveyResponseReopenTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $this->seed();
    }

    #[Test]
    public function school_admin_can_reopen_rejected_survey_response_for_editing(): void
    {
        $permission = Permission::findOrCreate('survey_responses.write', 'web');
        $role = Role::findOrCreate('schooladmin', 'web');
        $role->givePermissionTo($permission);

        $institution = Institution::factory()->create(['type' => 'school']);
        $user = User::factory()->create([
            'institution_id' => $institution->id,
        ]);
        $user->assignRole($role);
        $user->givePermissionTo($permission);

        $survey = Survey::factory()->published()->create([
            'creator_id' => $user->id,
            'response_count' => 0,
        ]);

        $question = SurveyQuestion::create([
            'survey_id' => $survey->id,
            'title' => 'Test sualı',
            'description' => 'Test təsviri',
            'type' => 'text',
            'order_index' => 1,
            'is_required' => true,
            'is_active' => true,
        ]);

        $response = SurveyResponse::create([
            'survey_id' => $survey->id,
            'institution_id' => $institution->id,
            'department_id' => null,
            'respondent_id' => $user->id,
            'respondent_role' => 'schooladmin',
            'responses' => [
                (string) $question->id => 'Cavab'
            ],
            'progress_percentage' => 100,
            'is_complete' => true,
            'status' => 'rejected',
            'submitted_at' => now()->subDay(),
            'rejection_reason' => 'Əlavə məlumat tələb olunur',
            'metadata' => [],
        ]);

        $workflow = ApprovalWorkflow::create([
            'name' => 'Survey Response Approval',
            'workflow_type' => 'survey_response',
            'status' => 'active',
            'approval_chain' => [
                [
                    'level' => 1,
                    'role' => 'sektoradmin',
                    'required' => true,
                    'title' => 'Sektor Admini'
                ],
            ],
            'workflow_config' => [],
            'description' => null,
            'created_by' => $user->id,
        ]);

        $approvalRequest = DataApprovalRequest::create([
            'workflow_id' => $workflow->id,
            'institution_id' => $institution->id,
            'approvalable_type' => SurveyResponse::class,
            'approvalable_id' => $response->id,
            'submitted_by' => $user->id,
            'submitted_at' => now()->subHours(12),
            'current_status' => 'rejected',
            'current_approval_level' => 1,
            'submission_notes' => null,
            'request_metadata' => [],
            'deadline' => now()->addDays(3),
            'completed_at' => now()->subHours(6),
        ]);

        Sanctum::actingAs($user);

        $this->postJson("/api/survey-responses/{$response->id}/reopen")
            ->assertStatus(200)
            ->assertJson([
                'success' => true,
                'data' => [
                    'response' => [
                        'id' => $response->id,
                        'status' => 'draft',
                    ],
                ],
            ]);

        $response->refresh();
        $approvalRequest->refresh();

        $this->assertEquals('draft', $response->status);
        $this->assertNull($response->submitted_at);
        $this->assertNull($response->approved_at);
        $this->assertEquals(100, $response->progress_percentage);
        $this->assertTrue($response->is_complete);
        $this->assertEquals('Əlavə məlumat tələb olunur', $response->rejection_reason);

        $this->assertEquals('pending', $approvalRequest->current_status);
        $this->assertEquals(1, $approvalRequest->current_approval_level);
        $this->assertNull($approvalRequest->completed_at);
        $this->assertEquals($user->id, $approvalRequest->submitted_by);
        $this->assertEquals(1, $approvalRequest->request_metadata['resubmission_count']);
        $this->assertNotNull($approvalRequest->request_metadata['last_resubmitted_at']);
        $this->assertNotNull($approvalRequest->submitted_at);
        $this->assertTrue($approvalRequest->deadline->greaterThan(now()));
    }

    #[Test]
    public function user_cannot_reopen_response_they_do_not_own(): void
    {
        $permission = Permission::findOrCreate('survey_responses.write', 'web');
        $role = Role::findOrCreate('schooladmin', 'web');
        $role->givePermissionTo($permission);

        $institution = Institution::factory()->create(['type' => 'school']);

        $owner = User::factory()->create([
            'institution_id' => $institution->id,
        ]);
        $owner->assignRole($role);
        $owner->givePermissionTo($permission);

        $otherUser = User::factory()->create([
            'institution_id' => $institution->id,
        ]);
        $otherUser->assignRole($role);
        $otherUser->givePermissionTo($permission);

        $survey = Survey::factory()->published()->create([
            'creator_id' => $owner->id,
        ]);

        $question = SurveyQuestion::create([
            'survey_id' => $survey->id,
            'title' => 'Test sualı',
            'description' => 'Test təsviri',
            'type' => 'text',
            'order_index' => 1,
            'is_required' => true,
            'is_active' => true,
        ]);

        $response = SurveyResponse::create([
            'survey_id' => $survey->id,
            'institution_id' => $institution->id,
            'department_id' => null,
            'respondent_id' => $owner->id,
            'respondent_role' => 'schooladmin',
            'responses' => [
                (string) $question->id => 'Cavab'
            ],
            'progress_percentage' => 100,
            'is_complete' => true,
            'status' => 'rejected',
            'submitted_at' => now()->subDay(),
            'rejection_reason' => 'Əlavə məlumat tələb olunur',
            'metadata' => [],
        ]);

        $workflow = ApprovalWorkflow::create([
            'name' => 'Survey Response Approval',
            'workflow_type' => 'survey_response',
            'status' => 'active',
            'approval_chain' => [
                [
                    'level' => 1,
                    'role' => 'sektoradmin',
                    'required' => true,
                    'title' => 'Sektor Admini'
                ],
            ],
            'workflow_config' => [],
            'description' => null,
            'created_by' => $owner->id,
        ]);

        DataApprovalRequest::create([
            'workflow_id' => $workflow->id,
            'institution_id' => $institution->id,
            'approvalable_type' => SurveyResponse::class,
            'approvalable_id' => $response->id,
            'submitted_by' => $owner->id,
            'submitted_at' => now()->subHours(12),
            'current_status' => 'rejected',
            'current_approval_level' => 1,
            'submission_notes' => null,
            'request_metadata' => [],
            'deadline' => now()->addDays(3),
            'completed_at' => now()->subHours(6),
        ]);

        Sanctum::actingAs($otherUser);

        $this->postJson("/api/survey-responses/{$response->id}/reopen")
            ->assertStatus(403);

        $response->refresh();
        $this->assertEquals('rejected', $response->status);
    }
}
